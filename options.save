#!/usr/bin/python3.7

import argparse
import pwd

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user_check', help='Check if the user exists on the systemand the cpanel', default='hello')
parser.add_argument('-a', '--add_res', help='Add restriction to htaccess and htpasswd', required=True)
parser.add_argument('-r', '--rem_res', help='Remove restrictions', action='store_true')



args = parser.parse_args()

print(args.user_check)
print(args.add_res)
#print(args.rem_res)

if (args.add_res):
	print(f"Lets begin adding restriction for the account {args.add_res}")
	#Check for availability of the user
	check_user()
	#Check for immutability and correct the necessary
	check_file()
	
	add_restrictions()
	

if (args.rem_res):
	print(f"Lets remove teh restrictions for the account {args.rem_res}")


home="FALSE"


##this  fucntion should return a tuple

def gen_cred():
	meth=crypt.METHOD_SHA256
	salty="password1234"
	htuser=crypt.crypt(salty,meth)
	htpas=crypt.crypt(salty,meth)
	return htuser, htpas

## this bit involves checking for the user in passwd file

def check_user(user):
	home=pwd.getpwnam(user).pw_dir
	print(home)


## this bit is the main bdy so far,  involves sending the name of the user to the check_user function , also the while loop here is to consistently take the user name ^C and ^d are used to exit out cleanly

while True:
             try:
                     user=input("Enter the name of the user that you want to test availability for :")
                     fi(user)
                     if home!= "FALSE":
                             break
             except (KeyError):
                     print("[**]Oops!!... Looks to be that you may have entered a wrong input or perhaps spelled it wrong.")
             except (KeyboardInterrupt, EOFError):
                     print("")
                     print("[+]Exiting.")
                     break
 


##next bit involves taking the hashed content of the tuple and working on it.

htuser=tup1[0]
htpass=tup1[1]


from subprocess import PIPE, Popen


##main program bit 


def check_immut():
	p1=PIPE(["lsattr", "test_file"], stdout=PIPE)
	ou,err=p1.communicate()
	out=ou.decode('ascii').split( )
	
	with open('test_file', 'rt') as file_in:
		contents=file_in.read()
	
##flag_set ==> flag implies that the pre exiting restriction are already presnet. 

	if "Abuse..." in contents:
		flag_set=True
	else:
		flag_set=False

	if ("i" in out) or ("a" in out):
		if flag_set:
             		print("previosu restriction")
			flag_a=1
        	else:
             		print("immutables set, no abuse set, manual intervention")
			flag_proceed=0
	elsif flag_set:
		if ("i" in out) or ("a" in out):
			print("previosu restriction")
			flag_a=1
		else:
			print("Abuse set, no immutables set, manual intervention")
			flag_c=1
	else:
		print("No restictions")
		flag_d=1
     
	return flag_a, flag_b, flag_c, flag_d




